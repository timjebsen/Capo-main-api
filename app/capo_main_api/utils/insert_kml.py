import json
import requests
import re
from ..capo_main.sql.sql_connector import connector
from fastkml import  kml

# Parses and uploads the KML geometry to MySQL spatial type

def insert_kml(cursor, data):
    k = kml.KML()

    k.from_string(data.encode('utf-8'))

    features = list(k.features())
    features = list(features[0].features())

    for each in features:
        description = each.description
        name = each.name
        geo = str(each.geometry)
        geo = geo.replace(" 0", "")

        # ! If using a custom polygon a number of alterations need to be made to the polygon string generated by fastkml
        # 1: Change 'POLYGON Z ((14...' to -> 'MULTIPOLYGON((...'
        # 2. ADD an extra set of parentheses 'MULTIPOLYGON((...))' to -> 'MULTIPOLYGON(((...)))'
        geo = geo.replace("POLYGON Z ((", "MULTIPOLYGON(((")
        geo = geo.replace("))", ")))")


        sql = "INSERT INTO `region_polygons`(`uuid`, `state`, `region`, `polygon`, `type`) VALUES ({}, '{}', '{}', {}, '{}')".format("UUID()", "QLD", name, "MPolyFromText('{}')".format(geo), "Custom")
        cursor.execute(sql)
        print('Inserting new polygon: {}'.format(name))

@connector
def read_custom_kml(cursor, cpath=None):
    print('Starting: read custom KML')

    if (cpath is None):
        # _, _, filenames = next(walk(path))

        # for file in filenames:
        #     with open(path+file, 'rt', encoding="utf-8") as myfile:
        #         doc = myfile.read()
        #         insert_kml(cursor, doc)
        pass
    else:
        with open(cpath, 'rt', encoding="utf-8") as myfile:
            doc = myfile.read()
            insert_kml(cursor, doc)
        
kml_file = ".kml"
read_custom_kml(cpath=kml_file)


